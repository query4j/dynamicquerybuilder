#!/usr/bin/env python3
"""
Generate HTML report from JMH JSON benchmark results.
Usage: python3 generate-html-report.py input.json output.html
"""

import json
import sys
import os
from datetime import datetime

def generate_html_report(json_file, output_file):
    """Generate HTML report from JMH JSON results."""
    
    # Read JSON results
    try:
        with open(json_file, 'r') as f:
            results = json.load(f)
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"Error reading JSON file: {e}")
        return False
    
    # Generate HTML
    html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Query4j Core Module Benchmarks</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; }}
        .header {{ background-color: #f5f5f5; padding: 20px; border-radius: 5px; margin-bottom: 20px; }}
        .benchmark-table {{ width: 100%; border-collapse: collapse; margin-bottom: 20px; }}
        .benchmark-table th, .benchmark-table td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
        .benchmark-table th {{ background-color: #f2f2f2; }}
        .performance-good {{ color: green; font-weight: bold; }}
        .performance-warning {{ color: orange; font-weight: bold; }}
        .performance-poor {{ color: red; font-weight: bold; }}
        .summary {{ background-color: #e8f4f8; padding: 15px; border-radius: 5px; margin-bottom: 20px; }}
    </style>
</head>
<body>
    <div class="header">
        <h1>Query4j Core Module JMH Benchmarks</h1>
        <p>Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        <p>Configuration: Warmup=5 iterations, Measurement=10 iterations, Fork=1, TimeUnit=microseconds</p>
    </div>
    
    <div class="summary">
        <h2>Summary</h2>
        <p>Total benchmarks: {len(results)}</p>
        <p>Benchmark focuses on core module performance including predicate operations, query cloning, and parameter extraction.</p>
    </div>
    
    <h2>Detailed Results</h2>
    <table class="benchmark-table">
        <thead>
            <tr>
                <th>Benchmark</th>
                <th>Score (μs/op)</th>
                <th>Error (±)</th>
                <th>Min</th>
                <th>Max</th>
                <th>Performance</th>
            </tr>
        </thead>
        <tbody>
"""
    
    # Add benchmark results
    for result in results:
        benchmark_name = result['benchmark'].split('.')[-1]  # Get method name only
        score = result.get('primaryMetric', {}).get('score', 0)
        score_error = result.get('primaryMetric', {}).get('scoreError', 0)
        stats = result.get('primaryMetric', {}).get('rawData', [[]])[0]
        min_val = min(stats) if stats else 0
        max_val = max(stats) if stats else 0
        
        # Handle missing scoreError gracefully
        if score_error is None or score_error == "NaN":
            score_error = 0
        
        # Determine performance level
        perf_class = "performance-good"
        perf_text = "Excellent"
        if score > 10:  # > 10 microseconds
            perf_class = "performance-warning"
            perf_text = "Needs Attention"
        if score > 50:  # > 50 microseconds
            perf_class = "performance-poor"
            perf_text = "Poor"
        
        html_content += f"""
            <tr>
                <td>{benchmark_name}</td>
                <td>{score:.3f}</td>
                <td>{score_error:.3f}</td>
                <td>{min_val:.3f}</td>
                <td>{max_val:.3f}</td>
                <td class="{perf_class}">{perf_text}</td>
            </tr>
"""
    
    html_content += """
        </tbody>
    </table>
    
    <div class="summary">
        <h3>Performance Targets</h3>
        <ul>
            <li><strong>Excellent:</strong> &lt; 10 μs/op (Green)</li>
            <li><strong>Needs Attention:</strong> 10-50 μs/op (Orange)</li>
            <li><strong>Poor:</strong> &gt; 50 μs/op (Red)</li>
        </ul>
    </div>
    
    <footer>
        <p><em>Generated by Query4j JMH Benchmark Report Generator</em></p>
    </footer>
</body>
</html>
"""
    
    # Write HTML file
    try:
        with open(output_file, 'w') as f:
            f.write(html_content)
        print(f"HTML report generated: {output_file}")
        return True
    except Exception as e:
        print(f"Error writing HTML file: {e}")
        return False

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python3 generate-html-report.py input.json output.html")
        sys.exit(1)
    
    json_file = sys.argv[1]
    html_file = sys.argv[2]
    
    if not os.path.exists(json_file):
        print(f"Input file not found: {json_file}")
        sys.exit(1)
    
    if generate_html_report(json_file, html_file):
        sys.exit(0)
    else:
        sys.exit(1)